/*
 * PreviousVersionExploiter
 * 
 * Version
 * 
 * Created on November 7th, 2011
 * 
 * Created by ND P
 */

package scala.tools.sbs
package pinpoint
package strategy

import scala.collection.mutable.ArrayBuffer
import scala.tools.nsc.io.Directory
import scala.tools.sbs.common.Backuper
import scala.tools.sbs.common.Reflector
import scala.tools.sbs.io.Log
import scala.tools.sbs.io.UI
import scala.tools.sbs.util.Constant

trait PreviousVersionExploiter {

  protected def log: Log

  protected def config: Config

  def exploit[Exploited](previous: Directory,
                         currentContext: ClassLoader,
                         backupPlace: Directory,
                         exploiting: => Exploited): Exploited = {
    val backupArray = ArrayBuffer[Backuper]()
    val reflector = Reflector(config, log)
    previous.deepFiles foreach (file => {
      val relative = previous relativize file
      val className = relative.path.replace(Constant.SLASH, ".").replace(".class", "")
      try {
        val location = reflector.locationOf(className, currentContext).toDirectory // catch from here
        val backuper = Backuper(log, List(location / relative toFile), location, backupPlace)
        backupArray append backuper
        backuper.backup
      }
      catch {
        case _: ClassNotFoundException => {
          UI.debug(className + " not exists in current version")
          log.debug(className + " not exists in current version")
        }
      }
    })
    val result = exploiting
    backupArray foreach (_ restore)
    result
  }

}
